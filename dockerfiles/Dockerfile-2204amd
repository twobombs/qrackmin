FROM nvidia/cuda:11.7.1-devel-ubuntu22.04

LABEL com.nvidia.volumes.needed="nvidia_driver"

ENV PATH /usr/local/nvidia/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}

# upgrades
RUN apt update && export DEBIAN_FRONTEND=noninteractive && apt -y upgrade && apt clean all
RUN apt install -y curl wget && apt clean all 

# install glvnd ( temp key fix )
RUN apt-get clean && \
    apt-key adv --fetch-keys "https://developer.download.nvidia.com/compute/cuda/repos/$(cat /etc/os-release | grep '^ID=' | awk -F'=' '{print $2}')$(cat /etc/os-release | grep '^VERSION_ID=' | awk -F'=' '{print $2}' | sed 's/[^0-9]*//g')/x86_64/3bf863cc.pub" && \
    rm -rf /var/lib/apt/lists/*
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt install -y software-properties-common net-tools openvpn netcat clinfo git mc opencl-headers ocl-icd-opencl-dev  && add-apt-repository multiverse && apt update && export DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends pkg-config libglvnd-dev && apt-get -f -y install && dpkg --configure -a && apt-get clean all && apt -y autoremove

# fetch AMD ROCm drivers from https://github.com/ROCm/ROCm-docker/blob/master/rocm-terminal/Dockerfile
# Initialize the image
# Modify to pre-install dev tools and ROCm packages
ARG ROCM_VERSION=6.3.4
ARG AMDGPU_VERSION=6.3.4

# AMD driver MI50+
RUN wget https://repo.radeon.com/amdgpu-install/6.3.4/ubuntu/jammy/amdgpu-install_6.3.60304-1_all.deb
RUN apt install -y ./amdgpu-install_6.3.60304-1_all.deb && apt update && apt clean all
RUN apt install -y python3-setuptools python3-wheel && apt clean all
RUN apt install -y rocm && apt clean all
RUN echo "libamdocl64.so" > /etc/OpenCL/vendors/amdocl64_60304_76.icd
RUN echo "libnvidia-opencl.so.1" >  /etc/OpenCL/vendors/nvidia.icd

# clone repos - patch cmake for CUDA noGPU build
RUN git clone --depth=1 --recursive https://github.com/unitaryfund/qrack.git
# hardcoded support up to maxwell, change to suit your minimum required sm version 
RUN sed -i 's/native/50/g' /qrack/cmake/CUDA.cmake

RUN cp -r /qrack /qrack128
RUN cp -r /qrack /qrack64
RUN cp -r /qrack /qrack16
RUN cp -r /qrack /qrack8

# install features
RUN apt-get update && apt-get -y install build-essential cmake openssh-server wget vim-common opencl-headers curl libfreetype6-dev autotools-dev libicu-dev libbz2-dev libboost-all-dev && apt-get clean all
# Qrack install & dependancies 
RUN cd /qrack/include && mkdir CL && cd /var/log && mkdir qrack && cd /qrack && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=5 -DUINTPOW=6 -DQBCAPPOW=6 -DENABLE_COMPLEX_X2=ON -DENABLE_OCL_MEM_GUARDS=ON .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all && make install
# 64Qrack install & dependancies
RUN cd /qrack64/include && mkdir CL && cd /qrack64 && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=6 -DUINTPOW=6 -DQBCAPPOW=7 -DENABLE_COMPLEX_X2=ON -DENABLE_OCL_MEM_GUARDS=ON -DENABLE_CUDA=ON .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all && make install
# BigQrack install & dependancies
RUN cd /qrack128/include && mkdir CL && cd /qrack128 && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=6 -DUINTPOW=6 -DQBCAPPOW=12 -DENABLE_RDRAND=OFF -DENABLE_COMPLEX_X2=ON -DENABLE_OCL_MEM_GUARDS=ON .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all && make install

# fetch thereminq & run/build scripts
COPY run-scripts/run /root/run
COPY run-scripts/run-vcl /root/run-vcl
COPY run-scripts/run-vcl-controller /root/run-vcl-controller
COPY run-scripts/run-vcl-vpn /root/run-vcl-vpn
RUN chmod 744 /root/run*

ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute
ENTRYPOINT /root/run
