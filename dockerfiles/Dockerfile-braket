FROM nvidia/cuda:12.4.1-devel-ubuntu22.04
LABEL com.nvidia.volumes.needed="nvidia_driver"

ENV PATH /usr/local/nvidia/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}

# install git, python+pip and pip aws braket sdk
RUN apt update && apt install -y git python3-pip cmake build-essential && apt clean all
RUN pip3 install --upgrade pip && pip3 cache purge
RUN pip3 install amazon-braket-sdk qiskit packaging && pip3 cache purge
# pyqrack-cuda installed by source

# install build features
RUN apt-get update && apt-get -y install git build-essential cmake openssh-server wget vim-common python3-setuptools opencl-headers curl libfreetype6-dev autotools-dev libicu-dev libbz2-dev libboost-all-dev && apt-get clean all

# NVidia hw integration
RUN mkdir -p /etc/OpenCL/vendors && echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

# clone repos with qrack and providers
RUN git clone --depth=1 --recursive https://github.com/unitaryfund/qrack.git
RUN git clone --depth=1 https://github.com/unitaryfund/pyqrack.git
RUN git clone --depth=1 https://github.com/vm6502q/qiskit-qrack-provider.git 
## && cd qiskit-qrack-provider && git reset --hard 27e1ec02caa6aa0440f1fe22d070797717d0f55b && git clean -df

RUN git clone --depth=1 https://github.com/vm6502q/cirq-qrack.git

# fetch aws braket sim repos and Qrack BraKET backend repo
RUN git clone --depth=1 https://github.com/amazon-braket/amazon-braket-default-simulator-python.git
RUN git clone --depth=1 https://github.com/amazon-braket/amazon-braket-containers.git
RUN git clone --depth=1 https://github.com/amazon-braket/amazon-braket-sdk-python.git
RUN git clone --depth=1 https://github.com/amazon-braket/amazon-braket-examples.git

RUN git clone --depth=1 https://github.com/vm6502q/amazon-braket-qrack-simulator-python.git

# install qrack braket simulator + qiskit & cirq qrack-provider
RUN cd /pyqrack && pip3 install . && pip3 cache purge
RUN cd /amazon-braket-qrack-simulator-python && pip3 install . && pip3 cache purge

# install qrack with diverse option precompiled - default is 32bit cuda ( placed at the end ) 
# other flavours can be installed onthefly by executing a make install in their precompiled directories

RUN cp -r /qrack /qrack128
RUN cp -r /qrack /qrack64
RUN cp -r /qrack /qrack16
RUN cp -r /qrack /qrack8

RUN cp -r /qrack /qrackcuda
RUN cp -r /qrack /qrack128cuda
RUN cp -r /qrack /qrack64cuda
RUN cp -r /qrack /qrack16cuda

# install qrack install features
RUN apt-get update && apt-get -y install build-essential cmake openssh-server wget vim-common opencl-headers curl libfreetype6-dev autotools-dev libicu-dev libbz2-dev libboost-all-dev libeigen3-dev && apt-get clean all

# CUDA Qrack install & dependancies 
RUN cd /var/log && mkdir qrack
RUN cd /qrack64cuda/include && mkdir CL && cd /qrack64cuda && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=6 -DUINTPOW=6 -DQBCAPPOW=7 -DENABLE_COMPLEX_X2=ON -DENABLE_CUDA=ON -DENABLE_OPENCL=OFF -DQRACK_CUDA_ARCHITECTURES=50 .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all
# SmallQrack install & dependancies
RUN cd /qrack16cuda/include && mkdir CL && cd /qrack16cuda && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=4 -DUINTPOW=5 -DQBCAPPOW=5 -DENABLE_COMPLEX_X2=OFF -DENABLE_CUDA=ON -DENABLE_OPENCL=OFF -DQRACK_CUDA_ARCHITECTURES=50 .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all
# BigQrack install & dependancies
RUN cd /qrack128cuda/include && mkdir CL && cd /qrack128cuda && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=6 -DUINTPOW=6 -DQBCAPPOW=12 -DENABLE_RDRAND=OFF -DENABLE_COMPLEX_X2=ON -DENABLE_CUDA=ON -DENABLE_OPENCL=OFF -DQRACK_CUDA_ARCHITECTURES=50 .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all
# CUDA32 default
RUN cd /qrackcuda/include && mkdir CL && cd /qrackcuda && mkdir _build && cd _build && cmake -DQRACK_DISABLE_QUNIT_FIDELITY_GUARD=ON -DENABLE_DEVRAND=ON -DFPPOW=5 -DUINTPOW=6 -DQBCAPPOW=6 -DENABLE_COMPLEX_X2=ON -DENABLE_CUDA=ON -DENABLE_OPENCL=OFF -DQRACK_CUDA_ARCHITECTURES=50 .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all && make install

# Qrack OCL install & dependancies 
RUN cd /qrack/include && mkdir CL && cd /qrack && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=5 -DUINTPOW=6 -DQBCAPPOW=6 -DENABLE_COMPLEX_X2=ON .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all 
# 64Qrack install & dependancies
RUN cd /qrack64/include && mkdir CL && cd /qrack64 && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=6 -DUINTPOW=6 -DQBCAPPOW=7 -DENABLE_COMPLEX_X2=ON .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all 
# SmallQrack install & dependancies
RUN cd /qrack16/include && mkdir CL && cd /qrack16 && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=4 -DUINTPOW=5 -DQBCAPPOW=5 -DENABLE_COMPLEX_X2=OFF .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all
# BigQrack install & dependancies
RUN cd /qrack128/include && mkdir CL && cd /qrack128 && mkdir _build && cd _build && cmake -DENABLE_DEVRAND=ON -DFPPOW=6 -DUINTPOW=6 -DQBCAPPOW=12 -DENABLE_RDRAND=OFF -DENABLE_COMPLEX_X2=ON .. && make -i -k -j $(grep -c ^processor /proc/cpuinfo) all 



ENV SAGEMAKER_PROGRAM /amazon-braket-qrack-simulator-python/src/braket/qrack_simulator/qrack_simulator.py
ENTRYPOINT python3 /amazon-braket-qrack-simulator-python/src/braket/qrack_simulator/qrack_simulator.py
